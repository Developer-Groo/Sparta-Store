name: CI-Pipeline

on:
  push:
    branches:
      - release_v1.0.0
      - develop
  pull_request:
    branches:
      - release_v1.0.0
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
      MYSQL_DB_PASSWORD: ${{ secrets.MYSQL_DB_PASSWORD }}
      MYSQL_URL: ${{ secrets.MYSQL_URL }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      NAVER_MAIL_USER_NAME: ${{ secrets.NAVER_MAIL_USER_NAME }}
      NAVER_MAIL_EMAIL_PASSWORD: ${{ secrets.NAVER_MAIL_EMAIL_PASSWORD }}
      TOSS_CLIENT_KEY: ${{ secrets.TOSS_CLIENT_KEY }}
      TOSS_SECRET_KEY: ${{ secrets.TOSS_SECRET_KEY }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build and Run Tests with Gradle
        run: ./gradlew clean build

      - name: Build Docker image
        run: |
          docker build -t ${DOCKER_USERNAME}/sparta_store-image:latest .

      - name: Run container for testing
        run: |
          docker run -d --name test-container -p 8080:8080 \
            -e GOOGLE_CLIENT_ID="${GOOGLE_CLIENT_ID}" \
            -e GOOGLE_CLIENT_SECRET="${GOOGLE_CLIENT_SECRET}" \
            -e GOOGLE_REDIRECT_URI="${GOOGLE_REDIRECT_URI}" \
            -e MYSQL_DB_PASSWORD="${MYSQL_DB_PASSWORD}" \
            -e MYSQL_URL="${MYSQL_URL}" \
            -e REDIS_HOST="${REDIS_HOST}" \
            -e NAVER_MAIL_USER_NAME="${NAVER_MAIL_USER_NAME}" \
            -e NAVER_MAIL_EMAIL_PASSWORD="${NAVER_MAIL_EMAIL_PASSWORD}" \
            -e TOSS_CLIENT_KEY="${TOSS_CLIENT_KEY}" \
            -e TOSS_SECRET_KEY="${TOSS_SECRET_KEY}" \
            -e JWT_SECRET_KEY="${JWT_SECRET_KEY}" \
          "${DOCKER_USERNAME}/sparta_store-image:latest"
          sleep 5
          docker ps
          docker logs test-container
          docker stop test-container && docker rm test-container

      - name: Push Docker image to ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
          docker tag ${DOCKER_USERNAME}/sparta_store-image:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com/sparta-store-repo:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com/sparta-store-repo:latest
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
